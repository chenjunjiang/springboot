Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Spring Boot单元测试

## Spring Boot对单元测试的支持
- NOTE
<pre>Spring Boot对单元测试的支持重点在于提供了一系列注解和工具的集成，它们是通过两个项目提供的：
包含核心功能的spring-boot-test项目和支持自动配置的spring-boot-test-autoconfigure。
通常情况下，我们通过spring-boot-starter-test的Starter来引入SpringBoot的核心支持项目以及
单元测试库。spring-boot-starter-test包含的类库如下。
·JUnit：一个Java语言的单元测试框架。
·Spring Test &amp; Spring Boot Test：为Spring Boot应用提供集成测试和工具支持。
·AssertJ：支持流式断言的Java测试框架。
·Hamcrest：一个匹配器库。
·Mockito：一个Java Mock框架。
·JSONassert：一个针对JSON的断言库。
·JsonPath：一个JSON XPath库。
如果Spring Boot提供的基础类库无法满足业务需求，我们也可以自行添加依赖。依赖注入的优点之
一就是可以轻松使用单元测试。这种方式可以直接通过new来创建对象，而不需要涉及Spring。
当然，也可以通过模拟对象来替换真实依赖。
如果需要集成测试，比如使用Spring的ApplicationContext，Spring同样能够提供无须部署应用程序
或连接到其他基础环境的集成测试。而Spring Boot应用本身就是一个ApplicationContext，
因此除了正常使用Spring上下文进行测试，无须执行其他操作。</pre>

## 常用单元测试注解
> leftSide=`true`

- NOTE
<pre>以Junit为例，在单元测试中会常用到一些注解，比如Spring Boot提供的@SpringBootTest、
@MockBean、@SpyBean、@WebMvcTest、@AutoConfigureMockMvc以及Junit提供的
@RunWith等。

@RunWith(SpringRunner.class)
@SpringBootTest
public class UserServiceTest {
    @Autowired
    private UserService userService;

    @Test
    public void testAdd(){
        User user = new User();
        user.setUsername(&quot;wangwu&quot;);
        user.setPassword(&quot;123456&quot;);
        userService.add(user);
    }
}

我们先来看Junit中的@RunWith注解，该注解用于说明此测试类的运行者，比如示例中使用的
SpringRunner。SpringRunner是由spring-test提供的，它实际上继承了
SpringJUnit4ClassRunner类，并且未重新定义任何方法，我们可以将SpringRunner理解为
SpringJUnit4ClassRunner更简洁的名字。@SpringBootTest注解由Spring Boot提供，该注解为
SpringApplication创建上下文并支持Spring Boot特性。
@SpringBootTest注解由Spring Boot提供，该注解为SpringApplication创建上下文并支持Spring Boot特性。
该测试项目中引入了spring-boot-starter-test依赖，默认情况下此依赖使用的单元测试类库为JUnit4，
此时@SpringBootTest注解需要配合@RunWith(SpringRunner.class)注解使用，否则注解会被忽略。

查看@SpringBootTest注解的源码，会发现其内部枚举类WebEnvironment提供了支持的多种单元测试模式。
从@SpringBootTest的源代码中可以看出，通过WebEnvironment枚举类提供了
MOCK、RANDOM_PORT、DEFINED_PORT和NONE这4种环境配置。
·Mock：加载WebApplicationContext并提供Mock Servlet环境，嵌入的Servlet容器不会被启动。
·RANDOM_PORT：加载一个EmbeddedWebApplicationContext并提供真实的Servlet环境。
嵌入的Servlet容器将被启动，并在一个随机端口上监听。
·DEFINED_PORT：加载一个EmbeddedWebApplicationContext并提供真实的Servlet环境。
嵌入的Servlet容器将被启动，并在一个默认的端口上监听（application.properties配置端口或者默认端口8080）。
·NONE：使用SpringApplication加载一个ApplicationContext，但是不提供任何Servlet环境。
示例中默认采用此种方式。
</pre>

## Web应用单元测试
> leftSide=`true`

- NOTE
<pre>在面向对象的程序设计中，模拟对象（mock object）是以可控的方式模拟真实对象行为的假对象。
在编程过程中，通常通过模拟一些输入数据，来验证程序是否达到预期效果。
模拟对象一般应用于真实对象有以下特性的场景：行为不确定、真实环境难搭建、行为难触发、
速度很慢、需界面操作、回调机制等。

当对Controller层进行单元测试时，便需要使用模拟对象，这里采用spring-test包中提供的MockMvc。
MockMvc可以做到不启动项目工程就可以对接口进行测试。
MockMvc实现了对HTTP请求的模拟，能够直接使用网络的形式，转换到Controller的调用，
这样可以使得测试速度快、不依赖网络环境，同时提供了一套验证的工具，使得请求的验证统一而且方便。
@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class TestControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @Test
    public void testMock() throws Exception {
        mockMvc.perform(
                MockMvcRequestBuilders.get(&quot;/mock&quot;)
                        .accept(MediaType.APPLICATION_JSON_VALUE)
                        .param(&quot;name&quot;, &quot;MockMvc&quot;))
                // 结果断言
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().string(&quot;HelloMockMvc!&quot;))
                // 添加一个结果处理器，此处打印整个响应结果信息
                .andDo(MockMvcResultHandlers.print());
    }
}
整个单元测试包含以下步骤：准备测试环境、执行MockMvc请求、添加验证断言、添加结果处理器、
得到MvcResult进行自定义断言/进行下一步的异步请求、卸载测试环境。


</pre>

## MockMvc的自动配置
- NOTE
<pre>@AutoConfigureMockMvc提供了自动配置MockMvc的功能，实例化MockMvc的具体代码在
spring-boot-test-autoconfigure项目中的MockMvcAutoConfiguration自动配置类内。
而该自动配置类的生效又涉及了@AutoConfigureMockMvc注解。</pre>

## 采用Mockito来mock所测试的类的依赖<br/>（避免加载spring bean，避免启动服务器）
> leftSide=`true`

- NOTE
<pre>举几个应用实例：
1，需要测试的service中注入的有一个dao，而我并不需要去测试这个dao的逻辑，只需要对service
进行测试。这个时候怎么办呢，mockito就可以做到把这个dao给mock了，调用这个dao的方法会
直接返回预设的值，不会去真正的执行dao里的逻辑，省时省力，专注于眼前。
2，不想在单测时启动容器，加载一堆没有用的东西。这个时候你就可以把你的单元测试写成一个纯
junit的test类，可以飞快的跑完测试逻辑，不用等待server加载，spring加载等乱七八糟的过程。
当然这个只是一个附带的好处，主要还是1。

官方文档：
https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html</pre>
