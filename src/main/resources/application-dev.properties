server.port=9091
server.servlet.context-path=/demo

#自定义属性
my1.age=20
my1.name=chenjj

spring.datasource.url=jdbc:mysql://localhost:3306/springboot?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC&allowMultiQueries=true&useSSL=false
spring.datasource.password=123456
spring.datasource.username=root

#mybatis.mapper-locations=classpath:com/chenjj/mapper/*.xml
#这种方式需要自己在resources目录下创建mapper目录然后存放xml
mybatis.mapper-locations=classpath:mapper/*.xml
mybatis.type-aliases-package=com.chenjj.spring.boot.model
# 驼峰命名规范 如：数据库字段是  order_id 那么 实体字段就要写成 orderId
mybatis.configuration.map-underscore-to-camel-case=true
# 如果想看到mybatis日志需要做如下配置,当然日志也可以由外部日志系统自己控制（比如log4j2）,但是这个配置优先级高
#logging.level.com.chenjj=INFO
# 主键自增回写方法,默认值MYSQL,详细说明请看文档
mapper.identity=MYSQL
mapper.mappers=tk.mybatis.mapper.common.BaseMapper
# 设置 insert 和 update 中，是否判断字符串类型!=''
mapper.not-empty=true
# 枚举按简单类型处理
mapper.enum-as-simple-type=true
########## 分页插件 ##########
pagehelper.helper-dialect=mysql
pagehelper.params.count=countSql
#分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页，
#pageNum>pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。
pagehelper.reasonable=false
#支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，
#自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页。
pagehelper.support-methods-arguments=true

#单机
spring.redis.host=47.104.87.61
spring.redis.port=16379
spring.redis.password=ztzh_0924
#集群
#spring.redis.cluster.nodes=127.0.0.1:6379,127.0.0.1:6380,127.0.0.1:6381
#spring.redis.cluster.max-redirects=5
# 连接超时时间（毫秒）
spring.redis.timeout=10000
# Redis默认情况下有16个分片，这里配置具体使用的分片，默认是0
spring.redis.database=0
# 连接池最大连接数（使用负值表示没有限制） 默认 8
spring.redis.lettuce.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
spring.redis.lettuce.pool.max-wait=-1
# 连接池中的最大空闲连接 默认 8
spring.redis.lettuce.pool.max-idle=8
# 连接池中的最小空闲连接 默认 0
spring.redis.lettuce.pool.min-idle=0

spring.swagger.base-package=com.chenjj.spring.boot.controller
spring.swagger.enabled=true

#-----------actuator相关配置--------------#
# 描述信息
# 其中info开头的属性，就是访问info端点中显示的相关内容
info.blog-url=http://blog.battcn.com
info.author=Levin
info.version=@project.version@
# 值得注意的是Spring Boot2.x中，默认只开放了info、health两个端点，剩余的需要自己通过配置management.endpoints.web.exposure.include属性来加载（有include自然就有exclude）
# 加载所有的端点/默认只加载了 info / health
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# 可以关闭制定的端点
management.endpoint.shutdown.enabled=false

# 路径映射，将 health 路径映射成 rest_health 那么在访问 health 路径将为404，因为原路径已经变成 rest_health 了，一般情况下不建议使用
# management.endpoints.web.path-mapping.health=rest_health

# 默认值是/actuator，如果要访问endpoint，比如：http://127.0.0.1:9091/demo/actuator/info
# Relative to server.servlet.context-path or management.server.servlet.context-path if management.server.port is configured.
# management.endpoints.web.base-path=/actuator

#The URL of the Spring Boot Admin Server to register at.
spring.boot.admin.client.url=http://127.0.0.1:9092
# 不配置老喜欢用主机名，看着不舒服....
spring.boot.admin.client.instance.prefer-ip=true
# 让客户端可以在受保护的admin server上注册api，如果admin server是受保护的，客户端这就必须提供admin server的用户名和密码
spring.boot.admin.client.username=chenjj
spring.boot.admin.client.password=123456

# 这里配置用户名和密码保证了client端的安全性，那么spring boot admin server如果想访问到client的 endpoint，
# 就必须设置spring.boot.admin.client.instance.metadata.user.name和spring.boot.admin.client.instance.metadata.user.password
# 允许spring boot admin server能访问
# 如果想让spring boot admin server无需认证就能访问client endpoint，就把下面这四个配置注释掉，
# 然后再新增SecurityPermitAllConfig类即可
#spring.security.user.name=admin
#spring.security.user.password=123
#spring.boot.admin.client.instance.metadata.user.name=admin
#spring.boot.admin.client.instance.metadata.user.password=123


admin.name=chenjj
admin.age=22

user.username=dev-admin
user.password=dev-pwd
